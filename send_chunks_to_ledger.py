#!/usr/bin/env python3

from ledgerblue.comm import getDongle
from ledgerblue.commException import CommException
import argparse
import struct

def bip32_path_big_endian_encoded():
	# return b"\x80000002" + struct.pack(">I", 1, 3)
	return bytes.fromhex("800000020000000100000003")


# The private key for BIP32 path: <44'/536'/2'/1/3>
# using mnemonic: <equip will roof matter pink blind book anxiety banner elbow sun young>
def alice_private_key():
    "f423ae3097703022b86b87c15424367ce827d11676fae5c7fe768de52d9cce2e"

# ByteInterval of the following fields in the following order:
# [
# 	  addressByteInterval,
# 	  amountByteInterval,
# 	  serializerByteInterval,
# 	  tokenDefinitionReferenceByteInterval
# ]
def particle_meta_data():
	"005300290216002302ae0026015b003d0379002900d2002304410026015b003d0053002907060023079e0026015b003d086900290899002309310026015b003d005300290d8900230e210026015b003d0eec002900d200230fb40026015b003d0eec00290899002311470026015b003d000000000000000012f8001800000000"

def atom_7_transfP_1_message_part_by_alice():
    ""

def apduPrefix():
    # https://en.wikipedia.org/wiki/Smart_card_application_protocol_data_unit
    CLA = bytes.fromhex("AA")
    INS = b"\x02" # `02` is sign atom
    P1 = b"\x08" # 8 UP particles
    P2 = b"\x00"

    return CLA + INS + P1 + P2


def send_large_atom_to_ledger_in_many_chunks():
    STREAM_LEN = 255 # Stream in batches of STREAM_LEN bytes each.
    bip32Bytes = bip32_path_big_endian_encoded()
    particlesMetaDataBytes = bytearray.fromhex(particle_meta_data())
    atomBytes = bytearray.fromhex(atom_7_transfP_1_message_part_by_alice())

    atomByteCount = len(atomBytes)

    prefix = apduPrefix()

    payload = bip32Bytes + particlesMetaDataBytes + struct.pack(">I", atomByteCount)

    L_c = bytes([len(payload)])
    apdu = prefix + L_c + payload

    dongle = getDongle(True)
    result = dongle.exchange(apdu)

    numberOfBytesThatHaveBeenSentToLedger = 0

    # Keep streaming data into the device till we run out of it.
    while numberOfBytesThatHaveBeenSentToLedger < atomByteCount:
    	numberOfBytesLeftToSend = atomByteCount - numberOfBytesThatHaveBeenSentToLedger
    	numberOfBytesThatHaveBeenSentToLedger += numberOfBytesLeftToSend
    	# numberOfBytesToSendThisChunk = min(numberOfBytesLeftToSend, STREAM_LEN)

    	chunk = bytearray(0)
        if numberOfBytesLeftToSend > STREAM_LEN:
            chunk = atomBytes[0:STREAM_LEN]
            atomBytes = atomBytes[STREAM_LEN:]
        else:
            chunk = atomBytes
            atomBytes = bytearray(0)

        L_c = bytes([len(chunk)])
        apdu = prefix + L_c + chunk
        result = dongle.exchange(apdu)

    print("Response: " + result.hex())
    print("Length: " + str(len(result)))

if __name__ == "__main__":
    # parser = argparse.ArgumentParser()
    #parser.add_argument('--txnJson', '-j', type=str, required=False)
    # parser.add_argument('--index', '-i', type=int, required=True)
    # args = parser.parse_args()
    send_large_atom_to_ledger_in_many_chunks()
