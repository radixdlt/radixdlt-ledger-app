#!/usr/bin/env python3

from ledgerblue.comm import getDongle
from ledgerblue.commException import CommException
import argparse
import struct
import math
from hashlib import sha256


def expected_printed_output():
	return """
Transfer at index: 0
Address b58: JEyoKNEYawJkNTiinQh1hR9c3F57ANixyBRi9fsSEfGedumiffR
Amount (dec): 999 E-18
Token symbol: ZELDA


Transfer at index: 1
Address b58: JFeqmatdMyjxNce38w3pEfDeJ9CV6NCkygDt3kXtivHLsP3p846
Amount (dec): 1 E-18
Token symbol: ZELDA


Transfer at index: 2
Address b58: JEyoKNEYawJkNTiinQh1hR9c3F57ANixyBRi9fsSEfGedumiffR
Amount (dec): 997 E-18
Token symbol: ZELDA


Transfer at index: 3
Address b58: JG3Ntbhj144hpz2ZooKsQG3Hq7UkCMwmFMwXfaYQgKFzNXAQvo5
Amount (dec): 2 E-18
Token symbol: ZELDA


Transfer at index: 4
Address b58: JEyoKNEYawJkNTiinQh1hR9c3F57ANixyBRi9fsSEfGedumiffR
Amount (dec): 994 E-18
Token symbol: ZELDA


Transfer at index: 5
Address b58: JFtJPDGvw4NDQyqCk7P5pWudNMeT8TFGCSvY9pTEqiyVhUGM9R9
Amount (dec): 3 E-18
Token symbol: ZELDA
	"""

def bip32_path_big_endian_encoded():
	# return b"\x80000002" + struct.pack(">I", 1, 3)
	return bytes.fromhex("800000020000000100000003")


# The private key for BIP32 path: <44'/536'/2'/1/3>
# using mnemonic: <equip will roof matter pink blind book anxiety banner elbow sun young>
def alice_private_key():
	return "f423ae3097703022b86b87c15424367ce827d11676fae5c7fe768de52d9cce2e"

# ByteInterval of the following fields in the following order:
# [
# 	  addressByteInterval,
# 	  amountByteInterval,
# 	  serializerByteInterval,
# 	  tokenDefinitionReferenceByteInterval
# ]
def particle_meta_data():
	return "01e600290216002302ae002602ee003d0379002903a90023044100260481003d06d6002907060023079e002607de003d0869002908990023093100260971003d0d5900290d8900230e2100260e61003d0eec00290f1c00230fb400260ff4003d107f002910af0023114700261187003d000000000000000012f8001800000000"

def atom_6_transfP_1_message_part_by_alice():
	return ""

def apduPrefix():
	# https://en.wikipedia.org/wiki/Smart_card_application_protocol_data_unit
	CLA = bytes.fromhex("AA")
	INS = b"\x02" # `02` is sign atom
	P1 = b"\x08" # 8 UP particles
	P2 = b"\x00"

	return CLA + INS + P1 + P2


def send_large_atom_to_ledger_in_many_chunks():

	STREAM_LEN = 255 # Stream in batches of STREAM_LEN bytes each.
	bip32Bytes = bip32_path_big_endian_encoded()
	particlesMetaDataBytes = bytearray.fromhex(particle_meta_data())
	atomBytes = bytearray.fromhex(atom_6_transfP_1_message_part_by_alice())

	atomByteCount = len(atomBytes)

	print("atomByteCount: " + str(atomByteCount))

	atomByteCountEncoded = struct.pack(">h", atomByteCount) # `>` means big endian, `h` means `short` -> 2 bytes
	print("atomByteCountEncoded: " + atomByteCountEncoded.hex())

	prefix = apduPrefix()

	payload = bip32Bytes + atomByteCountEncoded + particlesMetaDataBytes

	print("Sending payload: " + payload.hex())

	L_c = bytes([len(payload)])
	apdu = prefix + L_c + payload

	dongle = getDongle(True)
	result = dongle.exchange(apdu)

	numberOfBytesThatHaveBeenSentToLedger = 0

	chunkIndex = 0
	numberOfChunksToSend = int(math.ceil(atomByteCount / STREAM_LEN))
	print(f"Atom will be sent in #chunks: {numberOfChunksToSend}")

	atomBytesChunked = atomBytes.copy()

	# Keep streaming data into the device till we run out of it.
	while numberOfBytesThatHaveBeenSentToLedger < atomByteCount:
		print(f"Sending chunk {chunkIndex+1}/{numberOfChunksToSend}")
		numberOfBytesLeftToSend = atomByteCount - numberOfBytesThatHaveBeenSentToLedger

		chunk = bytearray(0)
		if numberOfBytesLeftToSend > STREAM_LEN:
			chunk = atomBytesChunked[0:STREAM_LEN]
			atomBytesChunked = atomBytesChunked[STREAM_LEN:]
		else:
			chunk = atomBytesChunked
			atomBytesChunked = bytearray(0)

		chunkSize = len(chunk)
		print(f"Chunk {chunkIndex+1}: [{numberOfBytesThatHaveBeenSentToLedger}-{numberOfBytesThatHaveBeenSentToLedger+chunkSize}]") # has size: {chunkSize}, bytes: {chunk.hex()}")
		# hasher.update(chunk)
		# print(f"Expected hasher state after chunk {chunkIndex+1}: {hasher.hexdigest()}")
		L_c = bytes([chunkSize])
		numberOfBytesThatHaveBeenSentToLedger += chunkSize
		apdu = prefix + L_c + chunk
		result = dongle.exchange(apdu)
		chunkIndex += 1
		print(f"numberOfBytesThatHaveBeenSentToLedger: {numberOfBytesThatHaveBeenSentToLedger}, atomByteCount: {atomByteCount}")

	firstHasher = sha256()
	firstHasher.update(atomBytes)
	secondHasher = sha256()
	secondHasher.update(firstHasher.digest())
	expectedSha256TwiceHashOfAtom = secondHasher.hexdigest()
	hashFromLedger = result.hex()

	print(f"Response: {hashFromLedger}")
	print(f"Expected hash: {expectedSha256TwiceHashOfAtom}")
	if expectedSha256TwiceHashOfAtom == hashFromLedger:
		print("Awesome! Hash from ledger matches expected hash")
	else:
		print("Bah! Something is wrong with the hash")
	# print("Length: " + str(len(result)))

	print("Expected to to parse these transfers:\n")
	print(expected_printed_output())

if __name__ == "__main__":
	# parser = argparse.ArgumentParser()
	#parser.add_argument('--txnJson', '-j', type=str, required=False)
	# parser.add_argument('--index', '-i', type=int, required=True)
	# args = parser.parse_args()
	send_large_atom_to_ledger_in_many_chunks()
